// ===== SCROLL SUAVE + MENU MOBILE + FUN√á√ïES DIN√ÇMICAS =====
document.addEventListener('DOMContentLoaded', function() {
  // ===== VARI√ÅVEIS =====
  const menuToggle = document.getElementById('menuToggle'); // Bot√£o hamburguer do menu mobile
  const navList = document.getElementById('navList'); // Lista de navega√ß√£o
  const navLinks = document.querySelectorAll('.nav-link'); // Todos os links do menu

  // ===== MENU MOBILE =====
  menuToggle.addEventListener('click', function() { // Evento de clique no bot√£o hamburguer
    navList.classList.toggle('active'); // Alterna visibilidade do menu (abre/fecha)
    menuToggle.classList.toggle('active'); // Alterna anima√ß√£o do bot√£o (hamburguer/X)
  });

  // ===== SCROLL SUAVE =====
  navLinks.forEach(link => { // Para cada link de navega√ß√£o
    link.addEventListener('click', function(event) { // Evento de clique nos links
      event.preventDefault(); // Previne comportamento padr√£o de pular para √¢ncora

      // Fechar menu mobile (se estiver aberto)
      navList.classList.remove('active'); // Esconde menu mobile
      menuToggle.classList.remove('active'); // Reseta anima√ß√£o do bot√£o

      // Navega√ß√£o suave para se√ß√£o alvo
      const targetId = this.getAttribute('href'); // Obt√©m ID da se√ß√£o (ex: #home)
      const targetSection = document.querySelector(targetId); // Encontra se√ß√£o no DOM

      // C√°lculo preciso considerando header fixo
      const headerHeight = document.querySelector('.header').offsetHeight; // Altura do header
      const targetPosition = targetSection.offsetTop - headerHeight; // Posi√ß√£o ajustada

      // Anima√ß√£o de scroll suave
      window.scrollTo({ // Executa scroll
        top: targetPosition, // Posi√ß√£o destino (ajustada para header fixo)
        behavior: 'smooth' // Comportamento suave (anima√ß√£o)
      });
    });
  });

  // ===== FECHAR MENU AO CLICAR FORA =====
  document.addEventListener('click', function(event) { // Evento de clique em qualquer lugar
    if (!event.target.closest('.nav-menu')) { // Verifica se clique N√ÉO foi no menu
      navList.classList.remove('active'); // Fecha menu se estiver aberto
      menuToggle.classList.remove('active'); // Reseta bot√£o hamburguer
    }
  });

  // ===== DESTACAR LINK ATIVO NO MENU =====
  window.addEventListener('scroll', function() { // Evento de scroll na p√°gina
    const sections = document.querySelectorAll('section'); // Todas as se√ß√µes
    const navLinks = document.querySelectorAll('.nav-link'); // Todos os links
    let currentSection = ''; // Vari√°vel para armazenar se√ß√£o atual vis√≠vel

    // Identificar qual se√ß√£o est√° vis√≠vel
    sections.forEach(section => { // Para cada se√ß√£o
      const sectionTop = section.offsetTop; // Posi√ß√£o top da se√ß√£o
      const sectionHeight = section.clientHeight; // Altura vis√≠vel da se√ß√£o
      const headerHeight = document.querySelector('.header').offsetHeight; // Altura do header

      // Verifica se scroll est√° dentro dos limites da se√ß√£o (com margem de 100px)
      if (window.scrollY >= (sectionTop - headerHeight - 100)) {
        currentSection = section.getAttribute('id'); // Atualiza se√ß√£o atual
      }
    });

    // Aplicar/remover classe 'active' nos links
    navLinks.forEach(link => { // Para cada link
      link.classList.remove('active'); // Remove classe active de todos
      if (link.getAttribute('href') === `#${currentSection}`) { // Se link corresponde √† se√ß√£o atual
        link.classList.add('active'); // Adiciona classe active
      }
    });
  });

  // ===== EXECU√á√ÉO DAS FUN√á√ïES DIN√ÇMICAS DO FOOTER =====
  // üïí ATUALIZAR HORA NO FOOTER
  document.getElementById('footer-hora').innerHTML = mostrarHoraAtual();
  
  // üìÖ ATUALIZAR DATA NO FOOTER  
  document.getElementById('footer-data').innerHTML = mostrarDataAtual();
  
  // üë• ATUALIZAR CONTADOR DE VISITAS NO FOOTER
  document.getElementById('footer-visitantes').innerHTML = contadorDeVisitantes();
});

// ===== FUN√á√ïES AUXILIARES PARA DATA/HORA/VISITANTES =====

// FUN√á√ÉO: mostrarDataHoraCompleta - Retorna data e hora formatadas
function mostrarDataHoraCompleta() {
    const agora = new Date(); // Cria objeto Date com momento atual
    const data = agora.toLocaleDateString('pt-BR'); // Formata data no padr√£o BR (DD/MM/AAAA)
    const hora = agora.toLocaleTimeString('pt-BR'); // Formata hora no padr√£o BR (HH:MM:SS)
    return `üìÖ ${data} ‚è∞ ${hora}`; // Retorna string formatada com emojis
}

// FUN√á√ÉO: mostrarHoraAtual - Retorna apenas a hora formatada
function mostrarHoraAtual() {
    const agora = new Date(); // Cria objeto Date com momento atual
    const hora = agora.toLocaleTimeString('pt-BR'); // Formata hora no padr√£o BR (HH:MM:SS)
    return `‚è∞ ${hora}`; // Retorna hora formatada com emoji de rel√≥gio
}

// FUN√á√ÉO: mostrarDataAtual - Retorna apenas a data formatada
function mostrarDataAtual() {
    const agora = new Date(); // Cria objeto Date com momento atual
    const data = agora.toLocaleDateString('pt-BR'); // Formata data no padr√£o BR (DD/MM/AAAA)
    return `üìÖ ${data}`; // Retorna data formatada com emoji de calend√°rio
}

// FUN√á√ÉO: contadorDeVisitantes - Gerencia contador persistente no localStorage
function contadorDeVisitantes() {
    const CHAVE_ARMAZENAMENTO = 'portfolioVisitasRonaldoSilva'; // Chave √∫nica para armazenamento
    
    let visitasAtuais = localStorage.getItem(CHAVE_ARMAZENAMENTO); // Obt√©m valor atual
    
    if (visitasAtuais === null) { // Se √© primeira visita
        visitasAtuais = 1; // Inicializa contador
    } else { // Se j√° existe registro
        visitasAtuais = parseInt(visitasAtuais) + 1; // Incrementa contador
    }
    
    localStorage.setItem(CHAVE_ARMAZENAMENTO, visitasAtuais.toString()); // Salva novo valor
    
    const visitasFormatadas = visitasAtuais.toLocaleString('pt-BR'); // Formata n√∫mero (ex: 1.234)
    return `üë• Visitantes: ${visitasFormatadas}`; // Retorna string formatada com emoji
}